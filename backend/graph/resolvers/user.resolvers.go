package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"errors"
	"fmt"

	"github.com/ariefsn/upwork/env"
	"github.com/ariefsn/upwork/graph"
	"github.com/ariefsn/upwork/models"
)

// ResendDeleteToken is the resolver for the resendDeleteToken field.
func (r *mutationResolver) ResendDeleteToken(ctx context.Context, input string) (string, error) {
	res, err := r.UserService.SendDeleteToken(ctx, input)
	if err != nil {
		return "", err
	}

	return res.ID, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input *models.DeleteUserInput) (*models.UserData, error) {
	res, err := r.UserService.Delete(ctx, *input)
	if err != nil {
		return nil, err
	}

	return &models.UserData{
		ID:       res.ID,
		FullName: res.FullName,
		City:     res.City,
		Country:  res.Country,
		Title:    res.Title,
	}, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, input string) (*models.UserData, error) {
	res, _ := r.UserService.Get(ctx, input)
	if res == nil {
		return nil, errors.New("invalid user id")
	}

	return &models.UserData{
		ID:       res.ID,
		FullName: res.FullName,
		City:     res.City,
		Country:  res.Country,
		Title:    res.Title,
	}, nil
}

// GetUserIds is the resolver for the getUserIds field.
func (r *queryResolver) GetUserIds(ctx context.Context) ([]string, error) {
	return r.UserService.GetIds(ctx)
}

// URL is the resolver for the url field.
func (r *userDataResolver) URL(ctx context.Context, obj *models.UserData) (string, error) {
	if obj.ID == "" {
		return "", errors.New("invalid user id")
	}

	baseUrl := env.GetEnv().Urls.UpworkFreelancerProfile

	return fmt.Sprintf("%s/%s", baseUrl, obj.ID), nil
}

// UserData returns graph.UserDataResolver implementation.
func (r *Resolver) UserData() graph.UserDataResolver { return &userDataResolver{r} }

type userDataResolver struct{ *Resolver }
