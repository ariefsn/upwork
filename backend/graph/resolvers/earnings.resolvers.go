package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"

	"github.com/ariefsn/upwork/graph"
	"github.com/ariefsn/upwork/models"
)

// UploadEarnings is the resolver for the uploadEarnings field.
func (r *mutationResolver) UploadEarnings(ctx context.Context, input models.EarningsInput) ([]*models.EarningsData, error) {
	_, err := r.UserService.Upsert(ctx, input.UserId, input.Email)
	if err != nil {
		return nil, err
	}

	return r.EarningsService.ParseCsv(ctx, input)
}

// GetEarnings is the resolver for the getEarnings field.
func (r *queryResolver) GetEarnings(ctx context.Context, input models.EarningsUserPerYearInput) ([]*models.EarningsDataMonthly, error) {
	return r.EarningsService.GetByUserIDPerYear(ctx, input)
}

// GetEarningsUsers is the resolver for the getEarningsUsers field.
func (r *queryResolver) GetEarningsUsers(ctx context.Context, input int) ([]*models.EarningsUserPerYear, error) {
	return r.EarningsService.EarningUsersYearly(ctx, input)
}

// GetEarningsYears is the resolver for the getEarningsYears field.
func (r *queryResolver) GetEarningsYears(ctx context.Context, input string) ([]int, error) {
	return r.EarningsService.GetYearsByUserID(ctx, input)
}

// SubEarnings is the resolver for the subEarnings field.
func (r *subscriptionResolver) SubEarnings(ctx context.Context, input models.EarningsUserPerYearInput) (<-chan []*models.EarningsDataMonthly, error) {
	return r.EarningsService.SubscribeEarnings(ctx, input)
}

// SubEarningUsers is the resolver for the subEarningUsers field.
func (r *subscriptionResolver) SubEarningUsers(ctx context.Context, input int) (<-chan []*models.EarningsUserPerYear, error) {
	return r.EarningsService.SubscribeEarningUsers(ctx, input)
}

// SubOnEarningUpdated is the resolver for the subOnEarningUpdated field.
func (r *subscriptionResolver) SubOnEarningUpdated(ctx context.Context, input models.EarningsUserPerYearInput) (<-chan []*models.EarningsDataMonthly, error) {
	return r.EarningsService.SubscribeOnEarningUpdated(ctx, input)
}

// Subscription returns graph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
